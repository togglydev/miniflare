"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Entrypoint for type "rust" builds, after "wrangler build" has run
const assert_1 = __importDefault(require("assert"));
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
(async () => {
    // 1. Load package.json file generated by wasm-bindgen containing filenames
    const pkg = JSON.parse(await fs_1.promises.readFile(path_1.default.join("pkg", "package.json"), "utf8"));
    // 2. Concatenate wasm-bindgen glue and worker code into worker/generated/script.js
    const glueName = pkg.files.find((file) => file.endsWith(".js"));
    assert_1.default(glueName);
    const glueCode = await fs_1.promises.readFile(path_1.default.join("pkg", glueName), "utf8");
    const code = await fs_1.promises.readFile(path_1.default.join("worker", "worker.js"), "utf8");
    const generatedDir = path_1.default.join("worker", "generated");
    await fs_1.promises.mkdir(generatedDir, { recursive: true });
    await fs_1.promises.writeFile(path_1.default.join(generatedDir, "script.js"), `${glueCode} ${code}`, "utf8");
    // 3. Copy *_bg.wasm file into worker/generated/script.wasm
    const wasmName = pkg.files.find((file) => file.endsWith(".wasm"));
    assert_1.default(wasmName);
    await fs_1.promises.copyFile(path_1.default.join("pkg", wasmName), path_1.default.join(generatedDir, "script.wasm"));
})();
//# sourceMappingURL=rust.js.map